Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Study

## Data Structures

### Primitive
> collapsed=`true`


#### Integer

#### Float

#### Character

#### String

#### Boolean

#### Double

### Non\-Primitive

#### Linear

##### Array
> collapsed=`true`


###### Dynamic

###### Static

###### Matrix
> collapsed=`true`


####### Sparse Matrix

##### LinkedList
> collapsed=`true`


###### Singly LinkedList

###### Doubly LinkedList

###### Circular LinkedList

##### Stack

##### Queue
> collapsed=`true`


###### Circular Queue

###### Priority Queue

###### Deque\(Double Ended Queue\)

#### Non Liear

##### Graph

###### Tree

####### Binary Tree
> collapsed=`true`


######## Full Binary Tree

######## Complete Binary Tree
> collapsed=`true`


######### Segment Tree

######## Balanced Binary Tree

######## Perfect Binary Tree

######## Skewed Binary Tree

######## Heap
> collapsed=`true`


######### Max Heap

######### Min Heap

######## Binary Search Tree

###### Graph Representations
> collapsed=`true`


####### Adjacency List

####### Adjacency Matrix

####### Edge lists

###### Weighted Graph

###### Multigraph

###### Simple Graph

###### Bipartite Graph

###### DAG\(directed acyclic graph\)

###### Connected Graph

###### Disconnected Graph

###### Complete Graph

###### Directed Graph

###### Undirected Graph

###### SubGraph

##### Set
> collapsed=`true`


###### HashSet

###### SortedSet
> collapsed=`true`


####### TreeSet

##### Map
> collapsed=`true`


###### HashTable

###### HashMap

###### SortedMap
> collapsed=`true`


####### TreeMap

##### Trie

##### DSU\(Disjoint Set Union\)<br/>서로소

### Notation
> collapsed=`true`


#### binary number

#### octal number

#### decimal number

#### hexadecimal

### Expression
> collapsed=`true`


#### Infix Expression

#### Postfix Expression

#### Prefix Expression

## Algorithm
> leftSide=`true`


### Spanning Tree

#### MST\(Minimum Spanning Tree\)
> fillColor=`#FFC800`


##### Kruskal MST

##### Prim MST

### BackTracking
> fillColor=`#FFC800`,leftSide=`true`


### Dynamic Programming
> fillColor=`#FFC800`,leftSide=`true`


#### LCS\(Longest Common Subsequence\)

#### LIS\(Longest increasing Subsequence\)

#### 접근법

##### Top\-\-Down

##### Bottom\-Up

##### memoization

#### Knapsack

### Number Theory
> leftSide=`true`


#### Modular

#### Prime Number
> collapsed=`true`,leftSide=`true`


##### 에라토스테네스의 체

#### GCD\(greatest common divisor\)
> collapsed=`true`,fillColor=`#FFC800`


##### 유클리드 호제법

#### LCM\(Least Common Multiple\)
> collapsed=`true`


##### 유클리드 호제법

### Sort
> collapsed=`true`


#### 삽입 정렬

#### 쉘 정렬
> leftSide=`true`


#### 선택 정렬
> leftSide=`true`


#### 쿽 정렬
> fillColor=`#FFC800`,leftSide=`true`


#### 버블 정렬
> leftSide=`true`


#### 힙 정렬
> fillColor=`#FFC800`,leftSide=`true`


#### 머지 정렬\(Merge Sort\)
> collapsed=`true`,fillColor=`#FFC800`,leftSide=`true`


##### 2\-way

##### n\-way
> leftSide=`true`


#### 계수 정렬\(Counting Sort\)
> fillColor=`#FFC800`,leftSide=`true`


#### 기수 정렬\(Radix sort\)
> leftSide=`true`


#### 버킷 정렬\(bucket sort\)
> leftSide=`true`


#### Stable Sort
> fillColor=`#FFC800`


#### 위상 정렬
> fillColor=`#FFC800`


### String
> fillColor=`#FFC800`


#### KMP

#### Rabin Karp
> leftSide=`true`


### Search

#### DFS

##### Stack

##### Recursive

#### BFS
> leftSide=`true`


##### Queue

#### Binary Search Tree
> fillColor=`#FFC800`


### Shortest\-Path
> fillColor=`#FFC800`


#### 다익스트라

#### 벨만 포드
> leftSide=`true`


#### 플로이드\-와샬
> leftSide=`true`


#### SPFA\(Shortest Path Faster Algorithm\)

#### A start

### Greedy
> fillColor=`#FFC800`


### Recursive

#### Hanoi

### Divide And Conquer

### 네트워크 플로우
> fillColor=`#FFC800`


### Two Pointer
> fillColor=`#FFC800`


### matrix

#### rotate

### bracket Problem

#### stack
